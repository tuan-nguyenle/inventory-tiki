version: "3"
services:
  nginx:
    depends_on:
      - auth
      - product
    restart: always # because it is routing traffic to our entire app
    build:
      dockerfile: Dockerfile
      context: ./nginx
    ports:
      - "80:80"
    networks:
      - inventory_tiki

  auth:
    build:
      context: ./auth
      dockerfile: Dockerfile
    ports:
      - 8080:8080
    environment:
      SESSION_KEY: "${SESSION_KEY}"
      ACCESS_TOKEN_PUBLIC_KEY: "${ACCESS_TOKEN_PUBLIC_KEY}"
      ACCESS_TOKEN_PRIVATE_KEY: "${ACCESS_TOKEN_PRIVATE_KEY}"
    volumes:
      - /app/node_modules
      - ./auth:/app/
    networks:
      - inventory_tiki
    stdin_open: true
    tty: true

  product:
    build:
      context: ./product
      dockerfile: Dockerfile
    ports:
      - 8081:8081
    environment:
      SESSION_KEY: "${SESSION_KEY}"
      ACCESS_TOKEN_PUBLIC_KEY: "${ACCESS_TOKEN_PUBLIC_KEY}"
      ACCESS_TOKEN_PRIVATE_KEY: "${ACCESS_TOKEN_PRIVATE_KEY}"
    volumes:
      - /app/node_modules
      - ./product:/app/
    networks:
      - inventory_tiki
    stdin_open: true
    tty: true

  orders:
    build:
      context: ./orders
      dockerfile: Dockerfile
    ports:
      - 8082:8082
    environment:
      SESSION_KEY: "${SESSION_KEY}"
      ACCESS_TOKEN_PUBLIC_KEY: "${ACCESS_TOKEN_PUBLIC_KEY}"
      ACCESS_TOKEN_PRIVATE_KEY: "${ACCESS_TOKEN_PRIVATE_KEY}"
    volumes:
      - /app/node_modules
      - ./orders:/app/
    networks:
      - inventory_tiki
    stdin_open: true
    tty: true

  mongodb:
    image: mongo
    ports:
      - 27017:27017
    volumes:
      - ./mongodb:/data/db
    networks:
      - inventory_tiki

  rabbitmq:
    image: rabbitmq:3.11-management
    container_name: 'rabbitmq'
    ports:
      - 5673:5672
      - 15673:15672
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
      - inventory_tiki

networks:
  inventory_tiki:
    driver: bridge
volumes:
  nodemodules: {}
  mongodb:
